# SPDX-FileCopyrightText: Â© 2020 emilk (emil.ernerfeldt@gmail.com)
#
# SPDX-License-Identifier: MIT OR Apache-2.0

on: [push, pull_request, workflow_dispatch]

name: CI

env:
  RUSTFLAGS: -D warnings
  RUSTDOCFLAGS: -D warnings

jobs:
  check:
    name: Check
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v4
      - name: Install libheif dependencies (macOS)
        run: |
          brew update
          brew install libheif pkg-config
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true
      - uses: actions-rs/cargo@v1
        with:
          command: check
          args: --all-features
      - name: Check spelling of entire workspace
        uses: crate-ci/typos@master

  test:
    name: Test Suite
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v4
      - name: Install libheif dependencies (macOS)
        run: |
          brew update
          brew install libheif pkg-config
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true
      - uses: actions-rs/cargo@v1
        with:
          command: test
          args: --lib

  fmt:
    name: Rustfmt
    runs-on: ubuntu-24.04
    steps:
      - uses: actions/checkout@v4
      - name: Install libheif dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y software-properties-common
          sudo add-apt-repository -y ppa:strukturag/libheif
          sudo apt-get install -y libheif-dev libde265-dev libx265-dev libjpeg-dev libpng-dev libaom-dev libssl-dev
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true
          components: rustfmt
      - uses: actions-rs/cargo@v1
        with:
          command: fmt
          args: --all -- --check

  clippy:
    name: Clippy
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v4
      - name: Install libheif dependencies (macOS)
        run: |
          brew update
          brew install libheif pkg-config
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true
          components: clippy
      - uses: actions-rs/cargo@v1
        with:
          command: clippy
          args: -- -D warnings

  build:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
        - os: macos-latest
          TARGET: aarch64-apple-darwin

        # - os: macos-latest
        #   TARGET: x86_64-apple-darwin

        # - os: ubuntu-24.04
        #   TARGET: x86_64-unknown-linux-gnu

        - os: windows-2022
          TARGET: x86_64-pc-windows-msvc
          EXTENSION: .exe

    steps:
    - uses: actions/checkout@v4
    - uses: ilammy/setup-nasm@v1
    - name: Building ${{ matrix.TARGET }}
      run: echo "${{ matrix.TARGET }}"

    # macOS
    - name: Install cargo bundle
      run: cargo install cargo-bundle
      if: matrix.os == 'macos-latest'

    - name: Install cargo universal2
      run: cargo install universal2
      if: matrix.os == 'macos-latest'

    - name: Install libheif dependencies (macOS)
      if: matrix.os == 'macos-latest'
      run: |
        brew update
        brew install libheif pkg-config

    # windows
    - name: Install libheif dependencies (Windows)
      if: matrix.os == 'windows-2022'
      shell: pwsh
      run: |
        vcpkg integrate install
        vcpkg install libheif:x64-windows-static-md
        vcpkg install libheif:x64-windows-static

    # common
    - uses: actions-rs/cargo@v1
      with:
        use-cross: true
        command: build
        args: --verbose --release --target=${{ matrix.TARGET }}

    # From here only works when there's tag starting with `v`
    # macOS
    - name: Install cargo bundle
      run: ./build_mac.sh
      if: matrix.os == 'macos-latest'

    - name: Zip Mac Silicon Bundle
      run: mv target/release/bundle/osx/Chama\ Optics.app . && zip -r chama_optics_macos_apple_silicon.zip Chama\ Optics.app
      if: startsWith(github.ref, 'refs/tags/v') && matrix.os == 'macos-latest'

    - name: Upload Mac Release
      if: startsWith(github.ref, 'refs/tags/v') && matrix.os == 'macos-latest'
      id: upload-release-asset-mac
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.release_job.outputs.upload_url }}
        asset_path: chama_optics_macos_apple_silicon.zip
        asset_name: chama_optics_macos_apple_silicon.zip
        asset_content_type: application/zip

    # windows
    - name: Upload Windows 2019 Release exe
      if: startsWith(github.ref, 'refs/tags/v') && matrix.os == 'windows-2019'
      id: upload-release-asset-windows-classic
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.release_job.outputs.upload_url }}
        asset_path: target/release/chama-optics.exe
        asset_name: chama-optics.exe
        asset_content_type: application/zip
