# SPDX-FileCopyrightText: Â© 2020 emilk (emil.ernerfeldt@gmail.com)
#
# SPDX-License-Identifier: MIT OR Apache-2.0

on: [push, pull_request, workflow_dispatch]

name: CI

env:
  RUSTFLAGS: -D warnings
  RUSTDOCFLAGS: -D warnings

jobs:
  check:
    name: Check
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Install libheif dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y software-properties-common
          sudo add-apt-repository -y ppa:strukturag/libheif
          sudo apt-get install -y libheif-dev libde265-dev libx265-dev libjpeg-dev libpng-dev libaom-dev libssl-dev
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true
      - uses: actions-rs/cargo@v1
        with:
          command: check
          args: --all-features

  # check_wasm:
  #   name: Check wasm32
  #   runs-on: ubuntu-latest
  #   steps:
  #     - uses: actions/checkout@v4
  #     - name: Install libheif dependencies
  #       run: |
  #         sudo apt-get update
  #         sudo apt-get install -y \
  #           libheif-dev libde265-dev libx265-dev libjpeg-dev libpng-dev libaom-dev
  #     - uses: actions-rs/toolchain@v1
  #       with:
  #         profile: minimal
  #         toolchain: stable
  #         target: wasm32-unknown-unknown
  #         override: true
  #     - uses: actions-rs/cargo@v1
  #       with:
  #         command: check
  #         args: --all-features --lib --target wasm32-unknown-unknown

  test:
    name: Test Suite
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Install libheif dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y software-properties-common
          sudo add-apt-repository -y ppa:strukturag/libheif
          sudo apt-get install -y libheif-dev libde265-dev libx265-dev libjpeg-dev libpng-dev libaom-dev libssl-dev
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true
      - run: sudo apt-get install libxcb-render0-dev libxcb-shape0-dev libxcb-xfixes0-dev libxkbcommon-dev libssl-dev
      - uses: actions-rs/cargo@v1
        with:
          command: test
          args: --lib

  fmt:
    name: Rustfmt
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Install libheif dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y software-properties-common
          sudo add-apt-repository -y ppa:strukturag/libheif
          sudo apt-get install -y libheif-dev libde265-dev libx265-dev libjpeg-dev libpng-dev libaom-dev libssl-dev
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true
          components: rustfmt
      - uses: actions-rs/cargo@v1
        with:
          command: fmt
          args: --all -- --check

  clippy:
    name: Clippy
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Install libheif dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y software-properties-common
          sudo add-apt-repository -y ppa:strukturag/libheif
          sudo apt-get install -y libheif-dev libde265-dev libx265-dev libjpeg-dev libpng-dev libaom-dev libssl-dev
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true
          components: clippy
      - uses: actions-rs/cargo@v1
        with:
          command: clippy
          args: -- -D warnings

  # trunk:
  #   name: trunk
  #   runs-on: ubuntu-latest
  #   steps:
  #     - uses: actions/checkout@v4
  #     - uses: actions-rs/toolchain@v1
  #     - name: Install libheif dependencies (Linux)
  #       run: |
  #         sudo apt-get update
  #         sudo apt-get install -y \
  #           libheif-dev libde265-dev libx265-dev libjpeg-dev libpng-dev libaom-dev
  #       with:
  #         profile: minimal
  #         toolchain: 1.88.0
  #         target: wasm32-unknown-unknown
  #         override: true
  #     - name: Download and install Trunk binary
  #       run: wget -qO- https://github.com/thedodd/trunk/releases/latest/download/trunk-x86_64-unknown-linux-gnu.tar.gz | tar -xzf-
  #     - name: Build
  #       run: ./trunk build

  build:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
        - os: macos-latest
          TARGET: aarch64-apple-darwin

        # - os: macos-latest
        #   TARGET: x86_64-apple-darwin

        # - os: ubuntu-latest
        #   TARGET: arm-unknown-linux-musleabihf

        # - os: ubuntu-latest
        #   TARGET: armv7-unknown-linux-musleabihf

        - os: ubuntu-latest
          TARGET: x86_64-unknown-linux-musl

        - os: windows-latest
          TARGET: x86_64-pc-windows-msvc
          EXTENSION: .exe

    steps:
    - name: Building ${{ matrix.TARGET }}
      run: echo "${{ matrix.TARGET }}"

    - name: Install libheif dependencies (Linux)
      if: contains(matrix.os, 'ubuntu')
      run: |
        sudo apt-get update
          sudo apt-get install -y software-properties-common
          sudo add-apt-repository -y ppa:strukturag/libheif
          sudo apt-get install -y libheif-dev libde265-dev libx265-dev libjpeg-dev libpng-dev libaom-dev libssl-dev
    - name: Install libheif dependencies (macOS)
      if: matrix.os == 'macos-latest'
      run: |
        brew update
        brew install libheif pkg-config
    - name: Install libheif dependencies (Windows)
      if: matrix.os == 'windows-latest'
      shell: pwsh
      run: |
        # Install vcpkg if not present
        if (-not (Test-Path "C:\vcpkg")) {
          git clone https://github.com/microsoft/vcpkg C:\vcpkg
          C:\vcpkg\bootstrap-vcpkg.bat
        }
        echo "VCPKG_ROOT=C:\vcpkg" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
        C:\vcpkg\vcpkg install libheif:x64-windows
        C:\vcpkg\vcpkg integrate install

    - uses: actions/checkout@master
    - uses: actions-rs/toolchain@v1.0.1
      with:
        toolchain: stable
        target: ${{ matrix.TARGET }}
        override: true

    - uses: actions-rs/cargo@v1
      with:
        use-cross: true
        command: build
        args: --verbose --release --target=${{ matrix.TARGET }}